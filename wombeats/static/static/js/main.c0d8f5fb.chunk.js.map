{"version":3,"sources":["logo.svg","utils/API.js","SearchInputForm.js","SearchResultTable.js","App.js","reportWebVitals.js","index.js"],"names":["axios","create","baseURL","responseType","SearchInputForm","props","artist","album","track","year","genre","fromBpm","toBpm","newMusicFriday","Box","component","sx","m","width","noValidate","autoComplete","TextField","id","label","name","defaultValue","FormControlLabel","control","Checkbox","defaultChecked","Button","type","variant","href","SearchResultTable","useState","data","columns","title","field","render","rowData","external_url","track_uri","App","search","window","location","params","URLSearchParams","get","state","isLoading","results","this","React","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0d8f5fb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"http://localhost:5000\",\r\n  responseType: \"json\"\r\n});","import React, { useReducer } from \"react\";\r\nimport { Button, Icon, TextField, Paper, Typography, Box, Checkbox, FormControlLabel } from \"@mui/material/\";\r\nimport PropTypes from \"prop-types\";\r\nimport API from \"./utils/API\";\r\n\r\nexport function SearchInputForm(props) {\r\n\r\n    const { artist, album, track, year, genre, fromBpm, toBpm, newMusicFriday } = props;\r\n\r\n    return (\r\n        <div>\r\n            <Box\r\n              component=\"form\"\r\n              sx={{\r\n                '& > :not(style)': { m: 1, width: '25ch' },\r\n              }}\r\n              noValidate\r\n              autoComplete=\"off\"\r\n            >\r\n                <form>\r\n                    <TextField\r\n                      id=\"outlined-name\"\r\n                      label=\"Artist\"\r\n                      name=\"artist\"\r\n                      defaultValue={artist}\r\n                    />\r\n                    <TextField\r\n                      id=\"outlined-name\"\r\n                      label=\"Album\"\r\n                      name=\"album\"\r\n                      defaultValue={album}\r\n                    />\r\n                    <TextField\r\n                      id=\"outlined-name\"\r\n                      label=\"Track\"\r\n                      name=\"track\"\r\n                      defaultValue={track}\r\n                    />\r\n                    <TextField\r\n                      id=\"outlined-name\"\r\n                      label=\"Year\"\r\n                      name=\"year\"\r\n                      defaultValue={year}\r\n                    />\r\n                    <TextField\r\n                      id=\"outlined-name\"\r\n                      label=\"Genre\"\r\n                      name=\"genre\"\r\n                      defaultValue={genre}\r\n                    />\r\n                    <TextField\r\n                      id=\"outlined-name\"\r\n                      label=\"From BPM\"\r\n                      name=\"fromBpm\"\r\n                      defaultValue={fromBpm}\r\n                    />\r\n                    <TextField\r\n                      id=\"outlined-name\"\r\n                      label=\"To BPM\"\r\n                      name=\"toBpm\"\r\n                      defaultValue={toBpm}\r\n                    />\r\n                    <FormControlLabel control={<Checkbox defaultChecked={newMusicFriday} />} label=\"Search New Music Friday\" name=\"newMusicFriday\"/>\r\n                    <Button type=\"submit\" variant=\"contained\">Search</Button>\r\n                    <Button href=\"/\" variant=\"contained\">Reset</Button>\r\n                </form>\r\n            </Box>\r\n        </div>\r\n     );\r\n}\r\n\r\nSearchInputForm.propTypes = {\r\n  artist: PropTypes.string,\r\n  album: PropTypes.string,\r\n  track: PropTypes.string,\r\n  year: PropTypes.number,\r\n  genre: PropTypes.string,\r\n  fromBpm: PropTypes.number,\r\n  toBpm: PropTypes.number,\r\n  newMusicFriday: PropTypes.string,\r\n};\r\n\r\nexport default SearchInputForm;","import React, { useState, useEffect } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default function SearchResultTable(props) {\r\n\r\n    const { artist, album, track, year, genre, fromBpm, toBpm, newMusicFriday } = props;\r\n\r\n    const [data, setData] = useState([])\r\n    const columns = [\r\n        { title: \"Artist\", field: \"artist\" },\r\n        { title: \"Album\", field: \"album\" },\r\n        { title: \"Track\", field: \"track\" },\r\n        { title: \"Release Date\", field: \"release_date\" },\r\n        { title: \"BPM\", field: \"bpm\" },\r\n        {\r\n            title: \"Browser\",\r\n            field: \"external_url\",\r\n            render: rowData => <a href={rowData.external_url}>Open in browser</a>\r\n        },\r\n        {\r\n            title: \"Spotify\",\r\n            field: \"track_uri\",\r\n            render: rowData => <a href={rowData.track_uri}>Open in Spotify</a>\r\n        }\r\n    ]\r\n\r\n//    useEffect(() => {\r\n//    fetch(\"https://np-song-matcher-bpm.herokuapp.com/search?isLoading=true&artist=\" + artist + \"&album=\" + album + \"&track=\" + track + \"&year=\" + year + \"&genre=\" + genre + \"&fromBpm=\" + fromBpm  + \"&toBpm=\" + toBpm + \"&newMusicFriday=\" + newMusicFriday)\r\n//        .then(resp => resp.json())\r\n//        .then(resp => {\r\n//        setData(resp)\r\n//        })\r\n//    }, [])\r\n    return (\r\n        <MaterialTable\r\n            title=\"Song Data\"\r\n            data={data}\r\n            columns={columns}\r\n        />\r\n    );\r\n}\r\n","import logo from './logo.svg';\nimport './App.css';\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport SearchInputForm from './SearchInputForm.js';\nimport SearchResultTable from './SearchResultTable.js';\nimport axios from 'axios';\nimport API from \"./utils/API\";\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    let search = window.location.search;\n    let params = new URLSearchParams(search);\n    let artist = params.get('artist');\n    let album = params.get('album');\n    let track = params.get('track');\n    let genre = params.get('genre');\n    let year = params.get('year');\n    let fromBpm = params.get('fromBpm');\n    let toBpm = params.get('toBpm');\n    let newMusicFriday = params.get('newMusicFriday');\n\n    this.state = {\n      isLoading: true,\n\n      artist: artist,\n      album: album,\n      track: track,\n      year: year,\n      genre: genre,\n      fromBpm: fromBpm,\n      toBpm: toBpm,\n      newMusicFriday: newMusicFriday,\n\n      results: [],\n    };\n  }\n\n  on_field_change() {\n\n\n  }\n\n  render() {\n        const { artist, album, track, year, genre, fromBpm, toBpm, newMusicFriday } = this.state;\n\n        return (\n            <div>\n                <SearchInputForm\n                    artist={artist}\n                    album={album}\n                    track={track}\n                    year={year}\n                    genre={genre}\n                    fromBpm={fromBpm}\n                    toBpm={toBpm}\n                    newMusicFriday={newMusicFriday}\n                />\n                <SearchResultTable\n                    artist={artist}\n                    album={album}\n                    track={track}\n                    year={year}\n                    genre={genre}\n                    fromBpm={fromBpm}\n                    toBpm={toBpm}\n                    newMusicFriday={newMusicFriday}\n                />\n            </div>\n        );\n  }\n\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}